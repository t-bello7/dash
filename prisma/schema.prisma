// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  planetScaleMode = true
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) 
  sessionToken String   @unique 
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  profile_image String?
  banner_image  String?  
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  blogs         BlogTokens[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id           String   @id @default(cuid()) 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  title        String
  content      String?
  published    Boolean  @default(false)
  authorId     String
  author       User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  scheduleAt   DateTime
  image         String?
}

model BlogTokens{
  id           String   @id @default(cuid()) 
  mediumToken      String   @unique
  DevtoToken      String   @unique
  hashnodeToken      String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}